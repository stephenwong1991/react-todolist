{"version":3,"sources":["components/todoItem/todoItem.js","App.js","serviceWorker.js","index.js"],"names":["TodoItem","toggleItem","index","_this","props","deleteItem","_this2","this","state","type","status","todo","react_default","a","createElement","className","join","onClick","e","id","value","Component","Todo","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","addTodo","event","setState","addTodoValue","target","inputKeyCpde","keyCode","list","push","localStorage","setItem","JSON","stringify","changeType","clearAll","filter","v","splice","parse","getItem","placeholder","onChange","onKeyDown","length","map","item","todoItem_todoItem","key","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","App","document","getElementById","URL","process","href","origin","addEventListener","concat","fetch","response","contentType","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.84675354.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './todoItem.css';\n\nclass TodoItem extends Component {\n  toggleItem = (index) => {\n    this.props.toggleItem(index);\n  }\n\n  deleteItem = (index) => {\n    this.props.deleteItem(index);\n  }\n\n  render() {\n    const state = this.props;\n    const type = state.type;\n    const status = state.todo.status;\n    if (type === 'unfinished' && status) {\n      return '';\n    }\n    if (type === 'complete' && !status) {\n      return '';\n    }\n    return (\n      <li className=\"todo\">\n        <span\n          className={['checkbox', state.todo.status ? 'checked' : ''].join(' ')}\n          onClick={(e) => this.toggleItem(state.id)}\n        ></span>\n        <p\n          className={state.todo.status ? 'complete' : ''}\n        >{state.id + 1}. {state.todo.value}</p>\n        <span className=\"delete\" onClick={(e) => this.deleteItem(state.id)}>×</span>\n      </li>\n    );\n  }\n}\n\nexport default TodoItem;\n","import React, { Component } from 'react';\nimport TodoItem from './components/todoItem/todoItem';\nimport './style/app.css';\n\nclass Todo extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      addTodoValue: '',\n      type: 'all',\n      list: []\n    };\n  }\n\n  componentDidMount() {\n    let list = JSON.parse(localStorage.getItem('todo-list')) || [];\n    this.setState({ list });\n  }\n\n  addTodo = (event) => {\n    this.setState({ addTodoValue: event.target.value });\n  }\n\n  inputKeyCpde = (event) => {\n    const keyCode = event.keyCode;\n    const value = event.target.value;\n    if (keyCode === 13) {\n      let { list } = this.state;\n      list.push({\n        status: false,\n        value\n      });\n      this.setState({\n        addTodoValue: '',\n        list\n      });\n      localStorage.setItem('todo-list', JSON.stringify(list));\n    }\n  }\n\n  changeType = (type) => {\n    this.setState({ type });\n  }\n\n  clearAll = () => {\n    let { list } = this.state;\n    list = list.filter(v => !v.status);\n    this.setState({ list });\n    localStorage.setItem('todo-list', JSON.stringify(list));\n  }\n\n  toggleItem = (index) => {\n    let { list } = this.state;\n    list[index].status = !list[index].status;\n    this.setState({ list });\n    localStorage.setItem('todo-list', JSON.stringify(list));\n  }\n\n  deleteItem = (index) => {\n    let { list } = this.state;\n    list.splice(index, 1);\n    this.setState({ list });\n    localStorage.setItem('todo-list', JSON.stringify(list));\n  }\n\n  render() {\n    const state = this.state;\n    return (\n      <div className=\"container\">\n        <header>Todos</header>\n        <div>\n          <input\n            className=\"new-todo\"\n            type=\"text\"\n            placeholder=\"请输入待办事项\"\n            value={state.addTodoValue}\n            onChange={this.addTodo}\n            onKeyDown={this.inputKeyCpde}\n          />\n        </div>\n        <section>\n          <span className=\"wait\">{state.list.filter(v => !v.status).length}项未完成</span>\n          <span\n            className={state.type === 'all' ? 'on' : ''}\n            onClick={(e) => this.changeType('all')}\n          >全部</span>\n          <span\n            className={state.type === 'unfinished' ? 'on' : ''}\n            onClick={(e) => this.changeType('unfinished')}\n          >未完成</span>\n          <span\n            className={state.type === 'complete' ? 'on' : ''}\n            onClick={(e) => this.changeType('complete')}\n          >已完成</span>\n          <span className=\"clear\" onClick={this.clearAll}>清除已完成</span>\n        </section>\n        <div>\n          <ul className=\"todo-list\">\n            {state.list.map((item, index) =>\n              <TodoItem\n                todo={item}\n                key={index}\n                id={index}\n                type={state.type}\n                toggleItem={this.toggleItem}\n                deleteItem={this.deleteItem}\n              />\n            )}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Todo;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\nserviceWorker.register();\n"],"sourceRoot":""}